version: '3.8'

services:
  # Master node for distributed training
  master:
    build:
      context: .
      dockerfile: Dockerfile
    image: metaflow-fsdp-training:latest
    container_name: training-master
    hostname: master
    networks:
      - training-network
    environment:
      - RANK=0
      - LOCAL_RANK=0
      - WORLD_SIZE=4
      - MASTER_ADDR=master
      - MASTER_PORT=29500
      - NODE_NAME=master
      - DISTRIBUTED=true
      - ENABLE_SSH=true
      - CUDA_VISIBLE_DEVICES=0,1
      - NCCL_DEBUG=INFO
      - PYTHONUNBUFFERED=1
      - WANDB_API_KEY=${WANDB_API_KEY}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    volumes:
      - ./data:/app/data
      - ./checkpoints:/app/checkpoints
      - ./logs:/app/logs
      - ./outputs:/app/outputs
      - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 2
              capabilities: [gpu]
    command: ["python", "examples/train_llama_fsdp.py", "run", "--num-nodes", "4"]
    
  # Worker node 1
  worker1:
    build:
      context: .
      dockerfile: Dockerfile
    image: metaflow-fsdp-training:latest
    container_name: training-worker1
    hostname: worker1
    networks:
      - training-network
    environment:
      - RANK=1
      - LOCAL_RANK=0
      - WORLD_SIZE=4
      - MASTER_ADDR=master
      - MASTER_PORT=29500
      - NODE_NAME=worker1
      - DISTRIBUTED=true
      - ENABLE_SSH=true
      - CUDA_VISIBLE_DEVICES=2,3
      - NCCL_DEBUG=INFO
      - PYTHONUNBUFFERED=1
      - WANDB_API_KEY=${WANDB_API_KEY}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    volumes:
      - ./data:/app/data
      - ./checkpoints:/app/checkpoints
      - ./logs:/app/logs
      - ./outputs:/app/outputs
    depends_on:
      - master
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 2
              capabilities: [gpu]
    command: ["python", "examples/train_llama_fsdp.py", "run", "--num-nodes", "4"]
    
  # Worker node 2
  worker2:
    build:
      context: .
      dockerfile: Dockerfile
    image: metaflow-fsdp-training:latest
    container_name: training-worker2
    hostname: worker2
    networks:
      - training-network
    environment:
      - RANK=2
      - LOCAL_RANK=0
      - WORLD_SIZE=4
      - MASTER_ADDR=master
      - MASTER_PORT=29500
      - NODE_NAME=worker2
      - DISTRIBUTED=true
      - ENABLE_SSH=true
      - CUDA_VISIBLE_DEVICES=4,5
      - NCCL_DEBUG=INFO
      - PYTHONUNBUFFERED=1
      - WANDB_API_KEY=${WANDB_API_KEY}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    volumes:
      - ./data:/app/data
      - ./checkpoints:/app/checkpoints
      - ./logs:/app/logs
      - ./outputs:/app/outputs
    depends_on:
      - master
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 2
              capabilities: [gpu]
    command: ["python", "examples/train_llama_fsdp.py", "run", "--num-nodes", "4"]
    
  # Worker node 3
  worker3:
    build:
      context: .
      dockerfile: Dockerfile
    image: metaflow-fsdp-training:latest
    container_name: training-worker3
    hostname: worker3
    networks:
      - training-network
    environment:
      - RANK=3
      - LOCAL_RANK=0
      - WORLD_SIZE=4
      - MASTER_ADDR=master
      - MASTER_PORT=29500
      - NODE_NAME=worker3
      - DISTRIBUTED=true
      - ENABLE_SSH=true
      - CUDA_VISIBLE_DEVICES=6,7
      - NCCL_DEBUG=INFO
      - PYTHONUNBUFFERED=1
      - WANDB_API_KEY=${WANDB_API_KEY}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    volumes:
      - ./data:/app/data
      - ./checkpoints:/app/checkpoints
      - ./logs:/app/logs
      - ./outputs:/app/outputs
    depends_on:
      - master
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 2
              capabilities: [gpu]
    command: ["python", "examples/train_llama_fsdp.py", "run", "--num-nodes", "4"]
    
  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: prometheus
    networks:
      - training-network
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      
  # Grafana for visualization
  grafana:
    image: grafana/grafana:10.0.3
    container_name: grafana
    networks:
      - training-network
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
      
  # MinIO for S3-compatible storage (local testing)
  minio:
    image: minio/minio:latest
    container_name: minio
    networks:
      - training-network
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"
    
  # Redis for caching and coordination
  redis:
    image: redis:7-alpine
    container_name: redis
    networks:
      - training-network
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      
  # Jupyter Lab for experimentation
  jupyter:
    build:
      context: .
      dockerfile: Dockerfile
    image: metaflow-fsdp-training:latest
    container_name: jupyter-lab
    networks:
      - training-network
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - CUDA_VISIBLE_DEVICES=0
    volumes:
      - ./:/app
      - jupyter-data:/root/.jupyter
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    command: ["jupyter", "lab", "--ip=0.0.0.0", "--port=8888", "--no-browser", "--allow-root", "--NotebookApp.token=''"]

networks:
  training-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  prometheus-data:
  grafana-data:
  minio-data:
  redis-data:
  jupyter-data: